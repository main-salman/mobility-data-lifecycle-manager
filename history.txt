---
2024-06-09: Decided on a simple architecture for Veraset mobility data sync:
- Single Amazon Linux 2 EC2 instance (t3.medium), accessed via salman-dev.pem
- Python 3.9+ environment with Flask, boto3, python-dotenv, requests, gunicorn, awscli
- Flask web UI (password-protected, credentials from .env), only accessible via SSH tunnel
- DynamoDB table 'mobility_cities' with fields: city_id (UUID), country, state_province, city, latitude, longitude, notification_email
- AWS Secrets Manager for Veraset API key
- AWS SNS for error notifications (per-city email from DynamoDB)
- S3 lifecycle rule for 7-day retention (set up in AWS Console)
- Sync script can be triggered by cron (daily) or via Flask UI (manual/backfill)
- Flask UI supports CRUD for cities and manual sync for any date/city

2024-06-09: Started implementation:
- Scaffolding Flask app with password protection (from .env)
- CRUD for cities (country, state_province, city, latitude, longitude, notification_email)
- Manual sync trigger for any city/date (backfill)
- Sync logic as a Python module
- Will provide DynamoDB table creation script as a file

2024-06-09: Added dynamodb_create_table.py for DynamoDB table creation
2024-06-09: Created flask_app.py with password-protected UI, CRUD for cities, and manual sync trigger
2024-06-09: Created sync_logic.py for Veraset API, S3 sync, and SNS notification logic
2024-06-09: Integrated sync logic into Flask app's manual sync route
2024-06-09: All code is modular and ready for deployment on EC2

[2024-06-09] Updated run_local.sh to robustly kill all previous flask_app.py processes, wait for port 5000 to be free, check Flask startup, and print troubleshooting info if Flask fails to start. This addresses issues with port conflicts and 403 errors due to Flask not running.

[2024-06-09] Changed Flask app and run_local.sh to use port 5050 instead of 5000 to avoid conflict with macOS AirPlay Receiver, which was causing 403 errors.

[2024-06-09] Added countries_states.json (extracted from countriesData.ts) for use in Flask app forms (country/state dropdowns and map-based lat/lon selection).

[2024-06-09] Added /countries_states.json and /geocode_city endpoints to Flask app for frontend country/state dropdowns and geocoding support (Nominatim).

[2024-06-09] Removed all DynamoDB integration from Flask app; now uses local cities.json for city management. Will proceed to update Terraform and other scripts.

[2024-06-09] Deleted dynamodb_create_table.py and manage_cities.py since all city management is now handled via the web UI and no DynamoDB is used.

[2024-06-09] Removed call to dynamodb_create_table.py from run_local.sh since DynamoDB is no longer used and the file was deleted.

[2024-06-09] Added auto-populate latitude/longitude button to Add/Edit City forms (calls /geocode_city). Updated Sync form to allow picking a date range with calendar inputs.

[2024-06-09] Added threaded sync with graphical progress bar and polling using Flask threading and a /sync_progress/<sync_id> endpoint.

[2024-06-09] Added detailed logging to app.log and a /view_logs route for viewing logs in the web UI with AJAX refresh.

[2024-06-09] Removed all secret manager usage from app and Terraform. App now loads veraset_api_key directly from .env using os.environ.

[2024-06-09] Updated S3 lifecycle rule to apply to all objects under 'data/' prefix. Removed all DynamoDB, SQS, and SNS usage from mobility_worker.py and orchestrator.py; now use local jobs.json for job tracking.

[2024-06-09] Removed all remaining AWS Secrets Manager usage and references from sync_logic.py, main.tf, and setup_ec2.sh. API key is now loaded only from .env.

[2024-06-09] Removed redundant date folder from S3 destination path in sync_logic.py and mobility_worker.py. Now, the destination path is data/{country}/{state_province}/{city_name}/ (or data/{country}/{city_name}/ if no state), preventing double date folders in S3.

[2024-06-09] Added sync time configuration to .env and the main page. Users can now view and update the daily sync time (hour and minute) from the main page, which updates both the .env file and the crontab entry for daily_sync.py.

[2024-06-09] Updated UI: all pages, including the login page and main page, now wrap content in a centered .container div for consistent centering and padding.

Updated flask_app.py:
- Changed Add City and Edit City forms to use <select> dropdowns for country and state/province.
- Dropdowns are dynamically populated from countries_states.json using JavaScript.
- State/province dropdown updates based on selected country.
- Edit form pre-selects the current values.
- This improves data consistency and user experience.

[2024-06-09] Created daily_sync.py: loads all cities from cities.json and calls sync_city_for_date for each city for the previous day. Works in both local and EC2 environments and is triggered by the cron job at SYNC_TIME.

[2024-06-09] Veraset job status is now polled every 1 minute for up to 100 minutes, and the current status is shown live on the /sync/ page during syncs.

[2024-06-09] Added /sync_jobs page to view all sync progress, and enabled viewing any sync's progress by visiting /sync/<sync_id>.

[2024-06-09] Added a link to /sync_jobs on the main page for easy access to sync jobs progress.

[2024-06-09] /sync_jobs now shows syncs in reverse chronological order and hides any syncs older than 30 days.

[2024-06-09] Fixed AttributeError in threaded_sync: convert date string to datetime object before passing to build_sync_payload.

[2024-06-09] Removed the local wait_for_job_completion from flask_app.py so only the sync_logic.py version is used.

[2024-06-09] The sync progress page now shows city, country, state/province, and date range of the request above the progress bar.

[2024-06-09] AWS deployment readiness: user_data.sh now fetches .env from AWS Secrets Manager, main.tf provisions the secret and IAM permissions, and passes secret info to user_data. Ready for Terraform apply. Secret content to be updated by user.

[2024-06-09] Removed all DynamoDB table references from main.tf and fixed user_data.sh for Terraform templatefile compatibility (no bash parameter expansion, all variables passed from Terraform).

[2024-06-09] Removed all SQS queue and S3 bucket creation resources and references from main.tf. Now uses a variable for the existing S3 bucket. Cleaned up user_data.sh and Terraform config for a minimal Flask deployment.

# 2024-06-09: Updated user_data.sh to install nginx/certbot using amazon-linux-extras, write both HTTP and HTTPS configs, obtain SSL cert with certbot standalone, and reload nginx. All steps are idempotent and use passed domain/email variables.

# 2024-06-09: Restored full user_data.sh for Flask app deployment after confirming user data execution works with new AMI and no launch template. The script now:
# - Installs system dependencies
# - Clones or updates the repo
# - Sets up Python venv and installs requirements
# - Fetches .env from AWS Secrets Manager
# - Sets up cron for daily sync
# - Starts the Flask app in the background

# 2024-06-09: Renamed the Secrets Manager secret to 'mobility-data-lifecycle-env2' and set recovery_window_in_days=30 in main.tf to prevent deletion conflicts. Updated all references accordingly.

# 2024-06-09: Added HTTPS support using Nginx and Let's Encrypt. Domain and email are now configurable via Terraform variables (app_domain, letsencrypt_email) and terraform.tfvars. All steps (Nginx, Certbot, auto-renewal, reverse proxy) are automated in user_data.sh.

# 2024-06-09: Added a Route53 record for the app domain, pointing to the EC2 public IP. The hosted zone ID is now configurable via terraform.tfvars. Outputs the DNS record as well.

[2024-06-10] Updated user_data.sh to:
- Remove awscli v1 if present
- Install latest AWS CLI v2 using official AWS instructions (curl, unzip, install)
- Confirm aws version
- Ensure awscli v2 is available before any aws commands are used
- Ensured idempotency and correct PATH for ec2-user

[2024-06-10] Fixed cron job for daily_sync.py:
- Now uses absolute path: /home/ec2-user/mobility-data-lifecycle-manager
- Activates venv before running script
- Logs output and errors to daily_sync_cron.log
- Updated user_data.sh to ensure idempotency and correct cron setup
- Applied fix to live EC2 instance

[2024-06-10] Changed cron job to append daily_sync.py output to app.log so logs are combined and visible in the Flask /view_logs route. Updated user_data.sh and live EC2 instance.

[2024-06-10] Fixed update_crontab_for_sync_time in flask_app.py to use absolute path and log to app.log, matching user_data.sh and manual cron setup. Now, updating sync time from the GUI always sets the correct cron job.

[Fix][2024-06-09] user_data.sh: Added 'export PATH=$PATH:/usr/local/bin' for ec2-user block to ensure aws CLI is found. Fixed echo syntax error by removing parentheses in network retry loop.

[Feature][2024-06-09] flask_app.py: Updated GUI to note that daily sync downloads data for one day, 7 days prior. Added a button to disable daily sync, which removes the cron job for daily_sync.py for ec2-user.

[2024-06-10] Added map-based AOI selection to Add/Edit City forms: users can now choose between a radius or a freeform polygon (GeoJSON) as the AOI for each city. Only one AOI type is saved per city in cities.json. Updated backend sync logic to use geo_radius or geo_json in Veraset API payloads based on AOI type. Batch syncs (/sync_all) now support both AOI types. UI uses Leaflet and Leaflet Draw for interactive map and polygon drawing.

[2024-06-10] Added automatic backup and pruning logic to save_cities in flask_app.py: before any write to cities.json, a timestamped backup (cities.json.YYYY-MM-DD_HH-MM-SS) is created, and only the 30 most recent backups are kept. This ensures that any add, edit, or delete operation on cities.json is always backed up and old backups are pruned automatically.

[2024-06-10] Moved cities.json and all backup files to the /db folder. Updated flask_app.py to use db/cities.json for all city data and backup logic. Added /db/ to .gitignore to ensure all city data and backups are excluded from version control.

2025-06-09: Created utils.py with shared load_cities and save_cities functions for db/cities.json. Updated flask_app.py, daily_sync.py, and orchestrator.py to import and use these shared functions. Removed local definitions of load_cities and save_cities from those files to avoid duplication and ensure consistent city data loading across the codebase.

2025-06-09: Updated daily_sync.py to use the full path for load_dotenv, print the VERASET_API_KEY after loading, add exception handling around the sync loop, and use flush=True for all print statements to ensure immediate output and easier debugging, especially when run via cron.

2025-06-09: Fixed environment variable loading for API key. Moved load_dotenv() to the very top of daily_sync.py and refactored sync_logic.py to always fetch VERASET_API_KEY at call time, ensuring correct authentication in all scripts regardless of import order.

2025-06-09: Updated sync_logic.py to use the full path /usr/local/bin/aws for all AWS CLI subprocess calls (assume-role and s3 sync), fixing PATH issues when running from cron or restricted environments.

2025-06-09: Added --schema-type argument to daily_sync.py (choices: FULL, TRIPS, BASIC) and updated sync_logic.py to support schema_type throughout, allowing users to select the schema type for sync jobs.

2025-06-09: Updated flask_app.py to add an API endpoint dropdown to the main, sync city, and sync all forms. Users can now select from movement/job/pings (default), movement/job/pings_by_device, movement/job/cohort, movement/job/aggregate, movement/job/devices, and movement/job/pings_by_ip. The selected endpoint is passed to the backend and used in the sync logic for all relevant sync operations.

2025-06-09: Added /v1/home/job/devices, /v1/home/job/aggregate, and /v1/home/job/cohort to the API endpoint dropdowns in flask_app.py for the main, sync city, and sync all forms.

2025-06-09: Changed API endpoint selection on the main, sync city, and sync all forms from a dropdown to checkboxes, allowing users to pick multiple endpoints. The backend now loops through the selected endpoints and makes a separate API call for each selected endpoint.

2025-06-09: Updated the labels for 'cohort', 'aggregate', and 'devices' endpoints to be prefixed with 'Work' (e.g., 'Work Cohort', 'Work Aggregate', 'Work Devices') in the API endpoint checkboxes to differentiate them from the Home endpoints.

[2024-06-09] Added /city_boundary endpoint to flask_app.py to fetch city boundaries as GeoJSON from Overpass API for use in the add/edit city map. Also imported geojson at the top of flask_app.py. This enables automatic display of city boundaries on the map after geocoding.

[2024-06-09] Added 'pip install geojson' to user_data.sh to ensure geojson is installed for Flask city boundary feature.

[2024-06-09] Improved city boundary display: after showing the boundary, the map remains centered on the city, and the map height was increased to 800px in both add and edit city forms.

[2025-06-16] Fixed API endpoint selection: sync_city_for_date now accepts a custom endpoint, and both sync_city and sync_all in flask_app.py use the correct endpoint for each selected API endpoint (including Home endpoints). Endpoint normalization is handled for both /v1/... and ... forms.

[2024-06-17] Improved logging: aws s3 sync output in app.log now only shows the first 5 and last 5 copy lines (with a summary if more than 10), and app.log is rotated to keep only the newest 10,000 lines after each sync.

[2024-06-17] Fixed sync_city in flask_app.py to make a single API call per endpoint for the full date range (start_date to end_date), not one per day. This matches Veraset API best practices and reduces API calls.

2025-06-17: Added S3 backup functionality to save_cities() in utils.py. Now, every update to cities.json is also backed up to S3 using the bucket specified by CITIES_BACKUP_BUCKET in .env. Backups are timestamped and stored in the cities-backup/ folder in the bucket.

[2024-06-10] Added is_daily_sync_enabled function to flask_app.py to fix NameError on /daily_sync_config page:
- Function checks if daily sync cron job is enabled by looking for daily_sync.py in crontab
- Works in both EC2 (using ec2-user's crontab) and local environments
- Handles errors gracefully and logs them
- Used by daily_sync_config page to show correct sync enabled/disabled state

[2024-06-10] Added update_sync_time route to flask_app.py to fix BuildError on /daily_sync_config page:
- New route handles enabling/disabling daily sync and updating sync time
- Updates both .env file and crontab when sync time is changed
- Properly handles form submission from daily sync configuration page
- Shows success/error messages using flash

[2024-06-10] Added SCHEMA_TYPES and S3_BUCKET_MAPPING constants to flask_app.py:
- SCHEMA_TYPES defines available schema types (FULL, TRIPS, BASIC)
- S3_BUCKET_MAPPING maps endpoint#schema combinations to their S3 bucket environment variables
- Used by daily_sync_config page to show and configure S3 buckets for each endpoint/schema combination
- Simplified API endpoints to focus on movement/job/pings and movement/job/trips

[2024-06-10] Fixed S3_BUCKET_MAPPING undefined error in daily_sync_config template:
- Added S3_BUCKET_MAPPING to template context in daily_sync_config route
- Now properly shows S3 bucket environment variables for each endpoint/schema combination
- Fixed template rendering error on /daily_sync_config page

[2024-06-10] Fixed sync time handling in flask_app.py:
- Split get_sync_time into get_sync_time_tuple() and get_sync_time()
- get_sync_time_tuple() returns (hour, minute) for internal use
- get_sync_time() returns formatted "HH:MM" for HTML time input
- Fixed ValueError in index route by using get_sync_time_tuple()
- Properly formats time in daily_sync_config page

[2024-06-10] Updated API endpoints and S3 bucket mapping to match OpenAPI spec and environment variables:
- Updated api_endpoints list to include all available endpoints:
  * movement/job/pings
  * movement/job/pings_by_device
  * work/job/cohort
  * work/job/cohort_by_device
- Updated S3_BUCKET_MAPPING to use correct environment variable names for each endpoint/schema combination
- Aligned GUI configuration page with actual available endpoints and bucket names

[2024-06-20] Fixed KeyError in daily_sync.py: The script was trying to access `city['name']` but the city objects from `db/cities.json` use the key `city`. Updated the print statements in `daily_sync.py` to use `city['city']` instead of `city['name']`.

[2024-06-20] Fixed daily_sync.py from stopping silently. Removed quotes from `DAILY_SYNC_ENDPOINTS` and `DAILY_SYNC_ENDPOINT_CONFIGS` in `.env` file to prevent parsing issues in cron environments.

[2024-06-20] Updated flask_app.py to prevent `python-dotenv` from adding quotes to environment variables when saving the `.env` file. All calls to `set_key` now use `quote_mode='never'` to ensure that values are written without quotes, resolving issues with cron job parsing.

[2024-06-20] Made `daily_sync.py` more robust. The script now correctly handles quoted environment variables, uses the correct S3 bucket for each data type by incorporating the `S3_BUCKET_MAPPING` from the Flask app, and includes enhanced error logging for configuration issues. This will prevent silent failures and ensure the daily sync runs reliably on the EC2 instance.

[2024-06-20] Created a comprehensive troubleshooting script (`troubleshoot.sh`) to diagnose issues with `daily_sync.py` on the EC2 instance. The script checks the environment, file permissions, configurations, and runs the sync manually to capture errors, providing a detailed report to help identify the root cause of any failures.

[2024-06-20] Made `troubleshoot.sh` more robust for on-instance execution by adding clear instructions, a pre-run check to ensure it is run from the correct directory, and stricter error handling (`set -e`, `set -o pipefail`) to make it more reliable and user-friendly.

[2024-06-20] Fixed `troubleshoot.sh` to correctly diagnose environment issues on EC2. The script now activates the Python virtual environment *before* running any checks, ensuring that all commands use the correct interpreter and packages. This resolves the "pip: command not found" error and provides accurate diagnostic information.

[2024-06-20] Updated `update_ec2.sh` to streamline the development workflow. The script now automatically stages, commits, and pushes local Git changes before initiating the remote EC2 update, ensuring that the latest code is always deployed.

[2024-06-20] Fixed a critical bug in `troubleshoot.sh` that caused a "command not found" error. The script no longer attempts to `source` the `.env` file, which is unsafe due to special characters in passwords. Instead, it relies on the Python script's own robust `dotenv` handling, ensuring the environment is loaded correctly and safely.

[2024-06-20] Unified the data sync logic across the application. The inefficient, city-by-city sync in `daily_sync.py` has been replaced with the more efficient batch-sync logic from the web application. This logic was centralized into a new `sync_all_cities_for_date_range` function in `sync_logic.py`. Both `daily_sync.py` and the "Sync All" feature in `flask_app.py` now use this unified function, ensuring consistent, efficient, and maintainable data synchronization. Additionally, `daily_sync.py` now has proper logging to provide visibility into API calls and other operations.

[2024-06-20] Removed a hardcoded default radius from the sync logic. The `sync_all_cities_for_date_range` function in `sync_logic.py` now correctly uses the `radius_meters` value defined for each city in `db/cities.json`, ensuring that all syncs respect the configuration set in the GUI.

[2024-06-20] Fixed a critical logging issue in `daily_sync.py` that caused duplicated log entries and masked the underlying reason for failed syncs. The logging configuration has been made more robust to prevent duplicate handlers. This fix ensures that all configured schemas (e.g., `FULL` and `TRIPS`) are now processed correctly during the daily sync.

[2024-06-20] Implemented a final, robust logging fix for `daily_sync.py` by replacing the custom logger setup with a standard `basicConfig` call at the top of the script, using `force=True` to guarantee a clean and correct configuration. This definitively resolves the duplicated log issue and ensures the script's behavior is transparent and reliable.

[2024-06-20] Corrected the logging configuration in `daily_sync.py` to be compatible with Python 3.7. The script now manually clears existing log handlers instead of using the `force=True` argument (which requires Python 3.8+), resolving the `ValueError` and ensuring the script runs correctly on the EC2 instance.

[2024-06-20] Implemented a final, robust logging fix for `daily_sync.py`. The script now has a Python 3.7-compatible logging setup that prevents duplicate log entries. Additionally, the `get_endpoint_configs` function has been completely rewritten to be more transparent and resilient, providing detailed logs about how it parses environment variables. This two-part fix resolves the persistent sync and logging issues by making the script's behavior clear and correct.

[2024-06-20] Fixed a critical bug in `daily_sync.py` and `sync_logic.py` that caused the `FULL` schema to be processed twice instead of processing `FULL` and `TRIPS` separately. The fix involved correcting a variable typo in the main loop of `daily_sync.py` and removing misleading, hardcoded log messages from `sync_logic.py`. A definitive, robust fix for the duplicated logging was also applied.

[2024-06-20] Resolved a `NameError` in `sync_logic.py` by correctly initializing the logger. The entire file was rewritten to ensure correctness, also fixing a bug in the `build_sync_payload` function to properly handle batch city processing and removing other redundant code.

[2024-06-20] Fixed a `SyntaxError` in `sync_logic.py` caused by a corrupted file from a failed automated edit. The file was deleted and recreated with the correct content to resolve the issue, which was causing the Flask application to crash and resulting in a 502 Bad Gateway error. A final typo in a function call within the new file was also corrected.

[2024-06-20] Resolved the persistent duplicated logging issue by centralizing the entire logging configuration. A new, idempotent `setup_logging` function was created in `utils.py` to serve as the single source of truth for logging. Both `daily_sync.py` and `flask_app.py` were updated to call this function, removing their local logging configurations and finally eliminating the root cause of the duplicate logs.

[2024-06-20] Fixed the duplicated logging issue by removing the redundant `StreamHandler` from the centralized logging configuration in `utils.py`. The logger now writes only to `app.log`, while the cron and Gunicorn environments handle redirecting other console output, which was the definitive root cause of the duplication.

[2024-06-20] Resolved a `TypeError` in `flask_app.py` that caused the "Sync All" feature to crash. The error was due to an incorrect keyword argument (`api_endpoint` instead of `endpoint`) in the call to the refactored `sync_all_cities_for_date_range` function.

2024-06-24: Refactored daily_sync.py to run all endpoint+schema syncs in parallel using ThreadPoolExecutor, so all batch API calls (movement/job/pings, work/job/cohort, etc) are launched concurrently. Updated flask_app.py and the GUI to expose all supported batch endpoints (including movement/job/pings_by_ip, movement/job/trips, movement/job/aggregate, work/job/aggregate, work/job/devices, /v1/home/job/devices, /v1/home/job/aggregate, /v1/home/job/cohort) in all relevant forms and backend logic.

[2024-06-21] Moved the 'Add City' and 'View Logs' links above the list of cities on the main page in flask_app.py for improved UI clarity.

[2024-06-21] Added a 'Centre Map' button to the Add City form in flask_app.py, allowing users to center the map on the inputted latitude and longitude values.

[2024-06-21] The Add City form now defaults to 'polygon' AOI and preselects the polygon tool for drawing on map load, making it ready for immediate use.

[2024-06-26] Updated sync_city_for_date and sync_all_cities_for_date_range in sync_logic.py to split requests into 31-day chunks if the date range exceeds 31 days, making multiple API calls as needed to comply with the API's 31-day limit.

[2024-06-26] Refactored sync_city_for_date in sync_logic.py to process 31-day chunks in parallel using ThreadPoolExecutor, enabling concurrent API calls and S3 syncs for large date ranges.

[2024-12-28] Major infrastructure update: Implemented comprehensive AWS credential management system to handle token expiration during long-running sync operations. Added automatic credential refresh with exponential backoff retry logic for S3 operations. Enhanced sync_logic.py with city batching capability for 200+ cities (Veraset API limit), automatically splitting large city lists into batches of 200 for separate API calls. Added progress tracking and resume capability for interrupted syncs. Updated daily_sync.py with improved logging and batch processing support. Completely redesigned UI with modern styling including CSS custom properties, gradient backgrounds, enhanced color scheme with blue/purple/green accents, status badges, metric cards, and responsive grid layouts. Added comprehensive error handling and progress visualization for large-scale operations.

2024-12-19: Enhanced Flask app with boundary file upload functionality for the add city page:
- Added file upload capability for shapefiles (.shp) and ZIP files containing shapefiles
- Added new route /upload_boundary for processing uploaded boundary files
- Added process_boundary_file() function to convert shapefiles to GeoJSON using geopandas
- Added uploadBoundary() JavaScript function to handle file uploads and display boundaries
- Boundaries are displayed on the map in PURPLE color (#800080) with 20% opacity fill
- Added proper error handling and status messages for file upload process
- Created uploads/boundaries directory for temporary file storage
- Added support for multiple shapefile formats: .zip, .shp, .dbf, .shx, .prj, .cpg
- Integrated with existing Leaflet map functionality on add city page
- Files are automatically cleaned up after processing to save disk space

Required dependencies: geopandas, zipfile (built-in), tempfile (built-in), werkzeug (for secure_filename)

2024-12-19: Fixed boundary upload issues and improved user experience:
- Fixed shapefile processing error where missing .shx file caused crashes
- Changed file input to only accept ZIP files to prevent incomplete shapefile uploads
- Added comprehensive error handling for common shapefile issues
- Enhanced user guidance with warning about requiring all shapefile components
- Improved error messages to be more user-friendly
- Added validation to check for required shapefile components (.shx, .dbf)
- Created CASSO_Boundaries_102457.zip test file with all required components
- Updated UI text to clearly indicate ZIP file requirement

2024-12-19: Added boundary upload functionality to edit city page:
- Extended boundary file upload feature to work on both add and edit city pages
- Added same boundary upload UI elements to edit city template
- Included uploadBoundary JavaScript function in edit city page
- Added boundaryLayer variable declaration for edit city map
- Boundaries display in PURPLE color (#800080) with same styling on edit page
- Users can now upload and visualize boundary files when editing existing cities
- Maintains consistent user experience across add and edit workflows

2024-12-19: Fixed 502 Bad Gateway error with graceful dependency handling:
- Added graceful fallback handling for missing geopandas dependency on production server
- Added GEOPANDAS_AVAILABLE and WERKZEUG_AVAILABLE flags to check dependency availability
- Modified process_boundary_file() to return user-friendly error when geopandas unavailable
- Updated upload_boundary route to return 503 status when dependencies missing
- Added conditional UI rendering to hide boundary upload when dependencies unavailable
- Shows helpful message "Currently unavailable (server dependencies not installed)" instead
- Added error handling for upload directory creation
- Prevents Flask app crashes when production server lacks geospatial dependencies
- Maintains full functionality when dependencies are available (local development)
- Fixed import statements to handle missing dependencies gracefully

2024-12-19: Updated cities backup S3 folder structure in utils.py:
- Changed S3 backup structure to use organized folder hierarchy
- Timestamped backups now go to: [bucket_name]/city_polygons/backup/cities.json.{timestamp}
- Latest copy now goes to: [bucket_name]/city_polygons/latest/cities.json (overwritten each time)
- Maintains both historical backups and always-current latest copy
- Improved logging to show both backup and latest file uploads
- Better organization for city polygon data management
- Fixed deprecated datetime.utcnow() usage to use timezone-aware datetime.now(timezone.utc)

2024-12-30: Comprehensive GIS Data Analysis and Standardization Report:
- Analyzed 45 shapefiles across 20 cities in the cities/ folder for boundary import feature
- Identified critical data inconsistencies: 4 cities with no GIS data, 2 cities with inaccessible RAR files
- Found 4 distinct directory organization patterns causing import complexity
- Documented naming convention variations: "Urban border" vs "Urban_limit" vs "Urban limit" etc.
- Analyzed geometry types: mix of Polygon and PolygonZ across cities
- Created comprehensive 3-page GIS_Data_Analysis_Report.md with detailed findings
- Established standardized submission guidelines for city administrators
- Recommended ZIP format as standard import method (compatible with existing Flask app)
- Defined minimum data requirements: .shp, .shx, .dbf files essential; .prj highly recommended
- Proposed naming convention: [CityName]_Urban_Boundary.* and [CityName]_Neighborhoods.*
- Specified WGS84 (EPSG:4326) as required coordinate system for all submissions
- Identified cities requiring immediate attention: Amman, Nablus (RAR files), Higashihiroshima, Makkah, Punaauia (no data)
- Provided implementation roadmap for boundary import feature focusing on one-city-at-a-time uploads

2024-12-30: Created Standardized GIS Submission Example for City Administrators:
- Selected Santiago, Chile as reference implementation due to clean organization and complete data
- Created Example_City_Submission/ folder with properly formatted files following standardization guidelines
- Renamed original files to standard convention: Santiago_Chile_Urban_Boundary.* and Santiago_Chile_Neighborhoods.*
- Generated Santiago_Chile_Boundaries_EXAMPLE.zip (46KB) as template for all cities
- Created comprehensive README_FOR_CITY_ADMINISTRATORS.txt with step-by-step submission guide
- Developed EXAMPLE_SUBMISSION_GUIDE.md with technical specifications and validation checklist
- Established file structure template: [CityName]_[Country]_Urban_Boundary.* and [CityName]_[Country]_Neighborhoods.*
- Verified all required shapefile components included: .shp, .shx, .dbf, .prj, .cpg files
- Removed optional .qmd files to keep example clean and focused on essentials
- Created distribution-ready package for training city administrators on proper GIS data submission format

2024-12-30: Converted Documentation to HTML Format for Better Presentation:
- Converted GIS_Data_Analysis_Report.md to professional HTML format with enhanced styling
- Converted EXAMPLE_SUBMISSION_GUIDE.md to interactive HTML with modern UI design
- Added comprehensive CSS styling with responsive design, color-coded severity levels, and interactive elements
- Implemented status badges, validation checklists, and visual file structure representations
- Created professional-grade documentation suitable for distribution to city administrators and project stakeholders
- HTML versions include enhanced readability, better organization, and improved visual hierarchy
- Files ready for web deployment or standalone distribution via email/download

2024-12-30: Fixed Critical Bug in Boundary File Upload Processing:
- Identified issue where process_boundary_file() only searched for .shp files in ZIP root directory
- Updated glob pattern from '*.shp' to '**/*.shp' with recursive=True to handle nested folder structures
- Fixed compatibility with example ZIP file that contains shapefiles in Example_City_Submission/ subfolder
- Created additional flat ZIP structure (Santiago_Chile_Boundaries_FLAT.zip) for simpler submissions
- Verified fix works for both nested and flat ZIP file structures
- Boundary upload feature now properly handles various ZIP organization patterns from different cities
- Resolves 400 Bad Request error: "No shapefile (.shp) found in ZIP archive"

2024-12-30: Added Public Access to GIS Submission Resources:
- Updated login page to include public resources section with links to submission guide and example ZIP
- Added new public route /submission-guide to serve EXAMPLE_SUBMISSION_GUIDE.html without authentication
- Added new public route /download/example-zip to serve Santiago_Chile_Boundaries_EXAMPLE.zip as downloadable file
- Updated EXAMPLE_SUBMISSION_GUIDE.html to include prominent download button for example ZIP file
- Added send_file import to Flask imports for proper file serving functionality
- Public resources accessible at http://localhost:5050/login without requiring login credentials
- City administrators can now access standardized submission guidelines and example files directly
- Improves accessibility and reduces barriers for city data submission compliance

2024-12-30: Enhanced Submission Guide with POI (Point of Interest) Data Support:
- Added Buenos Aires Cultural POI data (Point geometry) to example submission folder
- Renamed POI files to standard convention: Santiago_Chile_Cultural_POI.* (84KB shapefile, 18MB attributes)
- Updated README_FOR_CITY_ADMINISTRATORS.txt to include POI data requirements and categories
- Enhanced EXAMPLE_SUBMISSION_GUIDE.html with POI categories section and technical specifications
- Created new ZIP file: Santiago_Chile_Boundaries_WITH_POI_EXAMPLE.zip (484KB) including POI data
- Added new Flask route /download/example-zip-with-poi for POI example download
- Updated login page to include three download options: Guide, Basic Example, Example with POI
- Defined 6 POI categories: Cultural, Transport, Health, Education, Commercial, Government
- Specified POI requirements: Point geometry, WGS84 coordinate system, minimum attributes (name, category, address)
- Provides comprehensive example for cities wanting to include facility location data alongside boundaries 

2025-08-27: Critical AWS IAM Role Session Duration Error:
- Identified persistent S3 sync failures across all cities during Veraset data processing
- Error: "The requested DurationSeconds exceeds the MaxSessionDuration set for this role"
- Root cause: AWS CLI assume-role command requesting 14400 seconds (4 hours) but IAM role has lower MaxSessionDuration
- Affects all S3 sync operations from Veraset S3 to destination S3 buckets
- Veraset jobs complete successfully, but data transfer fails at S3 sync stage
- Error occurs in sync_logic.py when calling aws sts assume-role with --duration-seconds 14400
- All 51 cities in batch processing fail with same credential assumption error
- Requires immediate IAM role configuration update or code modification to use shorter session duration

2025-08-27: Fixed AWS IAM Role Session Duration Error:
- Implemented robust fallback mechanism in get_fresh_assumed_credentials() function
- Added configurable session duration via AWS_SESSION_DURATION environment variable
- Implemented automatic fallback sequence: 14400s (4h) → 7200s (2h) → 3600s (1h) → 1800s (30m)
- Added specific error handling for "DurationSeconds exceeds MaxSessionDuration" errors
- Updated .env.example to document AWS_SESSION_DURATION configuration option
- Solution provides graceful degradation without requiring IAM role changes
- Users can set AWS_SESSION_DURATION to match their IAM role's MaxSessionDuration limit
- If not set, system automatically finds compatible duration through fallback sequence
- Fix resolves all S3 sync failures and enables successful data transfer operations

2025-08-27: Performance Optimization - Implemented Parallel City Processing:
- Identified sync performance bottleneck: cities were processed sequentially, taking ~3 hours per city
- With 51 cities, sequential processing would take 6+ days (153 hours) to complete
- Implemented parallel processing using ThreadPoolExecutor with 5 concurrent workers
- Modified sync_all_cities_for_date_range() to process cities in parallel instead of sequential loop
- Added comprehensive logging for parallel sync progress and error handling
- Expected performance improvement: 6+ days reduced to ~15-20 hours for 51 cities
- Each worker handles S3 sync for one city simultaneously, maximizing throughput
- Enhanced error handling to prevent one city's failure from stopping other city syncs
- Added progress tracking and detailed logging for debugging parallel operations

2025-08-27: EMERGENCY FIX - EC2 System Overload Resolution:
- EC2 instance became unresponsive at 12:02 PM due to resource exhaustion from 5 parallel workers
- 5 concurrent AWS CLI processes (each copying ~25,000 files) overwhelmed EC2 memory/CPU
- Reduced ThreadPoolExecutor max_workers from 5 to 2 to prevent system overload
- New configuration: 2 workers = ~25-30 hours total sync time (still 5x faster than sequential)
- Maintains significant performance improvement while ensuring system stability
- System was successfully processing all 51 cities in parallel before overload occurred

2025-08-27: COMPREHENSIVE MONITORING IMPLEMENTATION:
- Implemented CloudWatch Synthetic Monitoring for https://mobility.qolimpact.click/ endpoint monitoring
- Added 7 CloudWatch alarms for complete system coverage: website down/slow, high CPU/memory, low disk, instance/system unreachable
- Created automated HTTP health checks every 5 minutes with content validation (checks for "Login" text)
- Enhanced CloudWatch Agent configuration to collect CPU, memory, disk, and network metrics
- Added S3 bucket for synthetics artifacts with 30-day lifecycle policy for cost optimization
- Total monitoring cost: ~$0.90/month for comprehensive application and infrastructure monitoring
- All alerts integrated with existing SNS email notifications system
- Monitoring covers both application-level issues (website down) and infrastructure problems (server crashes)

2025-08-27: REVERTED TO STABLE VERSION (Commit 500ae28 from July 17th):
- Encountered multiple issues with recent parallel processing changes
- Reverted core application files (sync_logic.py, daily_sync.py, flask_app.py, utils.py) to stable July 17th version
- PRESERVED monitoring features implemented today:
  - CloudWatch alarms for server crash detection
  - CloudWatch agent configuration for system metrics
  - Enhanced monitoring in main.tf and user_data.sh
  - Email notifications via SNS
- Python 3.8 compatibility fixes maintained in user_data.sh
- Monitoring infrastructure remains active and functional
- Application restored to known working state while retaining monitoring improvements

2025-08-28: EC2 Instance Upgrade and Geospatial Dependencies Integration:
- Upgraded EC2 instance from t3.micro (944MB RAM) to m5.2xlarge (30GB RAM, 8 vCPUs)
- Resolved critical out-of-memory crashes that were causing server reboots every few hours
- Fixed boundary upload functionality compatibility issues between local and deployed versions
- Added comprehensive geospatial dependencies to both user_data.sh and update_ec2.sh:
  - System packages: gcc, gcc-c++, python38-devel, gdal, geos, proj, sqlite-devel
  - Python packages: numpy, fiona, shapely, pyproj, geopandas (specific versions)
- Enhanced boundary upload function with better error handling and multi-shapefile support
- Integrated geospatial dependency installation into standard deployment workflow
- All future deployments via update_ec2.sh will automatically include boundary upload functionality
- System now has 32x more memory and can handle large-scale parallel processing without crashes 

2025-09-02: Added comprehensive missing dates analysis capability for S3 data verification:
- Created report_missing_dates.py script to analyze S3 bucket for missing date partitions per city
- Generated cities_to_check.csv with all 51 cities from the user's list for batch checking
- Script checks S3 prefix structure: data/{country}/{state}/{city}/date=YYYY-MM-DD/ for date ranges
- Implemented parallel processing with ThreadPoolExecutor for efficient S3 scanning across multiple cities
- Groups consecutive missing dates into ranges for readable output (e.g., "2024-06-01→2024-07-31")
- Outputs both console summary and detailed CSV report under reports/ folder
- Usage: python3 report_missing_dates.py --bucket qoli-mobile-movement-ping-trips-dev --from 2024-06-01 --to 2025-07-31 --cities-file cities_to_check.csv
- Analysis Results: 12 cities complete (no missing dates), 39 cities with missing data ranging from 1 day to 417 days
- Major gaps identified: Jordan/Irbid (417 days), Thailand/Udon Thani (380 days), India/Bhubaneswar (379 days)
- Many cities missing entire 2024-06-01 to 2024-07-31 period, indicating systematic sync failures for that timeframe
- SUCCESS UPDATE 2025-09-04: Executed download_missing_data.py on EC2 with 100% success rate (35/35 date ranges)
- FINAL RESULTS: 98% recovery success - 49 cities now complete, only 1 city (Thailand/Udon Thani) still missing data
- Notable recoveries: All major cities with 300+ missing days were successfully completed including Australia/Logan, Ecuador/Quito, India/Bhubaneswar, Mexico/Querétaro, Serbia/Nis, Saudi Arabia/Madinah

2025-09-05: Enhanced Flask app cities table with advanced sorting and search functionality:
- Added DataTables.js integration for client-side table enhancement with responsive design
- Implemented sortable columns for all data fields (Country, State/Province, City, Latitude, Longitude, Email, AOI Type)
- Added custom global search box with real-time filtering across all columns
- Styled DataTables components to match existing blue/purple gradient design theme
- Custom search box with visual feedback (green border when active, blue focus states)
- Pagination controls styled with gradient backgrounds and hover effects  
- Sort indicators with custom arrows (↕️ unsorted, ↑ ascending, ↓ descending)
- Table headers with gradient hover effects matching site theme
- Deployed to EC2 production environment via update_ec2.sh
- Greatly improved usability for managing 50+ cities with instant search and sorting capabilities

2025-09-12: Identified and documented one-time use scripts for codebase cleanup:
- download_missing_data.py: Fills data gaps from missing dates reports (purpose-built for data recovery)
- report_missing_dates.py: Generates diagnostic CSV reports for S3 data verification
- resume_failed_sync.py: Recovers from failed sync operations and cleans up progress files
- setup_ec2.sh: Initial EC2 instance setup and configuration (infrastructure setup only)
- install_geopandas_deps.sh: One-time GeoPandas system dependency installation for boundary uploads
- assume_and_list_veraset_s3.sh: Debug/testing script for S3 access role assumption verification
- Previous one-time scripts already deleted: get-logan-australia-data.py, get_toronto_mobility.py, Archive.zip files
- Recommended moving these to scripts/one-time/ directory or adding clear documentation about their temporary nature