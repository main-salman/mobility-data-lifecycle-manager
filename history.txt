---
2024-06-09: Decided on a simple architecture for Veraset mobility data sync:
- Single Amazon Linux 2 EC2 instance (t3.medium), accessed via salman-dev.pem
- Python 3.9+ environment with Flask, boto3, python-dotenv, requests, gunicorn, awscli
- Flask web UI (password-protected, credentials from .env), only accessible via SSH tunnel
- DynamoDB table 'mobility_cities' with fields: city_id (UUID), country, state_province, city, latitude, longitude, notification_email
- AWS Secrets Manager for Veraset API key
- AWS SNS for error notifications (per-city email from DynamoDB)
- S3 lifecycle rule for 7-day retention (set up in AWS Console)
- Sync script can be triggered by cron (daily) or via Flask UI (manual/backfill)
- Flask UI supports CRUD for cities and manual sync for any date/city

2024-06-09: Started implementation:
- Scaffolding Flask app with password protection (from .env)
- CRUD for cities (country, state_province, city, latitude, longitude, notification_email)
- Manual sync trigger for any city/date (backfill)
- Sync logic as a Python module
- Will provide DynamoDB table creation script as a file

2024-06-09: Added dynamodb_create_table.py for DynamoDB table creation
2024-06-09: Created flask_app.py with password-protected UI, CRUD for cities, and manual sync trigger
2024-06-09: Created sync_logic.py for Veraset API, S3 sync, and SNS notification logic
2024-06-09: Integrated sync logic into Flask app's manual sync route
2024-06-09: All code is modular and ready for deployment on EC2

[2024-06-09] Updated run_local.sh to robustly kill all previous flask_app.py processes, wait for port 5000 to be free, check Flask startup, and print troubleshooting info if Flask fails to start. This addresses issues with port conflicts and 403 errors due to Flask not running.

[2024-06-09] Changed Flask app and run_local.sh to use port 5050 instead of 5000 to avoid conflict with macOS AirPlay Receiver, which was causing 403 errors.

[2024-06-09] Added countries_states.json (extracted from countriesData.ts) for use in Flask app forms (country/state dropdowns and map-based lat/lon selection).

[2024-06-09] Added /countries_states.json and /geocode_city endpoints to Flask app for frontend country/state dropdowns and geocoding support (Nominatim).

[2024-06-09] Removed all DynamoDB integration from Flask app; now uses local cities.json for city management. Will proceed to update Terraform and other scripts.

[2024-06-09] Deleted dynamodb_create_table.py and manage_cities.py since all city management is now handled via the web UI and no DynamoDB is used.

[2024-06-09] Removed call to dynamodb_create_table.py from run_local.sh since DynamoDB is no longer used and the file was deleted.

[2024-06-09] Added auto-populate latitude/longitude button to Add/Edit City forms (calls /geocode_city). Updated Sync form to allow picking a date range with calendar inputs.

[2024-06-09] Added threaded sync with graphical progress bar and polling using Flask threading and a /sync_progress/<sync_id> endpoint.

[2024-06-09] Added detailed logging to app.log and a /view_logs route for viewing logs in the web UI with AJAX refresh.

[2024-06-09] Removed all secret manager usage from app and Terraform. App now loads veraset_api_key directly from .env using os.environ.

[2024-06-09] Updated S3 lifecycle rule to apply to all objects under 'data/' prefix. Removed all DynamoDB, SQS, and SNS usage from mobility_worker.py and orchestrator.py; now use local jobs.json for job tracking.

[2024-06-09] Removed all remaining AWS Secrets Manager usage and references from sync_logic.py, main.tf, and setup_ec2.sh. API key is now loaded only from .env.

[2024-06-09] Removed redundant date folder from S3 destination path in sync_logic.py and mobility_worker.py. Now, the destination path is data/{country}/{state_province}/{city_name}/ (or data/{country}/{city_name}/ if no state), preventing double date folders in S3.

[2024-06-09] Added sync time configuration to .env and the main page. Users can now view and update the daily sync time (hour and minute) from the main page, which updates both the .env file and the crontab entry for daily_sync.py.

[2024-06-09] Updated UI: all pages, including the login page and main page, now wrap content in a centered .container div for consistent centering and padding.

Updated flask_app.py:
- Changed Add City and Edit City forms to use <select> dropdowns for country and state/province.
- Dropdowns are dynamically populated from countries_states.json using JavaScript.
- State/province dropdown updates based on selected country.
- Edit form pre-selects the current values.
- This improves data consistency and user experience.

[2024-06-09] Created daily_sync.py: loads all cities from cities.json and calls sync_city_for_date for each city for the previous day. Works in both local and EC2 environments and is triggered by the cron job at SYNC_TIME.

[2024-06-09] Veraset job status is now polled every 1 minute for up to 100 minutes, and the current status is shown live on the /sync/ page during syncs.

[2024-06-09] Added /sync_jobs page to view all sync progress, and enabled viewing any sync's progress by visiting /sync/<sync_id>.

[2024-06-09] Added a link to /sync_jobs on the main page for easy access to sync jobs progress.

[2024-06-09] /sync_jobs now shows syncs in reverse chronological order and hides any syncs older than 30 days.

[2024-06-09] Fixed AttributeError in threaded_sync: convert date string to datetime object before passing to build_sync_payload.

[2024-06-09] Removed the local wait_for_job_completion from flask_app.py so only the sync_logic.py version is used.

[2024-06-09] The sync progress page now shows city, country, state/province, and date range of the request above the progress bar.

[2024-06-09] AWS deployment readiness: user_data.sh now fetches .env from AWS Secrets Manager, main.tf provisions the secret and IAM permissions, and passes secret info to user_data. Ready for Terraform apply. Secret content to be updated by user.

[2024-06-09] Removed all DynamoDB table references from main.tf and fixed user_data.sh for Terraform templatefile compatibility (no bash parameter expansion, all variables passed from Terraform).

[2024-06-09] Removed all SQS queue and S3 bucket creation resources and references from main.tf. Now uses a variable for the existing S3 bucket. Cleaned up user_data.sh and Terraform config for a minimal Flask deployment.

# 2024-06-09: Updated user_data.sh to install nginx/certbot using amazon-linux-extras, write both HTTP and HTTPS configs, obtain SSL cert with certbot standalone, and reload nginx. All steps are idempotent and use passed domain/email variables.

# 2024-06-09: Restored full user_data.sh for Flask app deployment after confirming user data execution works with new AMI and no launch template. The script now:
# - Installs system dependencies
# - Clones or updates the repo
# - Sets up Python venv and installs requirements
# - Fetches .env from AWS Secrets Manager
# - Sets up cron for daily sync
# - Starts the Flask app in the background

# 2024-06-09: Renamed the Secrets Manager secret to 'mobility-data-lifecycle-env2' and set recovery_window_in_days=30 in main.tf to prevent deletion conflicts. Updated all references accordingly.

# 2024-06-09: Added HTTPS support using Nginx and Let's Encrypt. Domain and email are now configurable via Terraform variables (app_domain, letsencrypt_email) and terraform.tfvars. All steps (Nginx, Certbot, auto-renewal, reverse proxy) are automated in user_data.sh.

# 2024-06-09: Added a Route53 record for the app domain, pointing to the EC2 public IP. The hosted zone ID is now configurable via terraform.tfvars. Outputs the DNS record as well.

[2024-06-10] Updated user_data.sh to:
- Remove awscli v1 if present
- Install latest AWS CLI v2 using official AWS instructions (curl, unzip, install)
- Confirm aws version
- Ensure awscli v2 is available before any aws commands are used
- Ensured idempotency and correct PATH for ec2-user

[2024-06-10] Fixed cron job for daily_sync.py:
- Now uses absolute path: /home/ec2-user/mobility-data-lifecycle-manager
- Activates venv before running script
- Logs output and errors to daily_sync_cron.log
- Updated user_data.sh to ensure idempotency and correct cron setup
- Applied fix to live EC2 instance

[2024-06-10] Changed cron job to append daily_sync.py output to app.log so logs are combined and visible in the Flask /view_logs route. Updated user_data.sh and live EC2 instance.

[2024-06-10] Fixed update_crontab_for_sync_time in flask_app.py to use absolute path and log to app.log, matching user_data.sh and manual cron setup. Now, updating sync time from the GUI always sets the correct cron job.

[Fix][2024-06-09] user_data.sh: Added 'export PATH=$PATH:/usr/local/bin' for ec2-user block to ensure aws CLI is found. Fixed echo syntax error by removing parentheses in network retry loop.

[Feature][2024-06-09] flask_app.py: Updated GUI to note that daily sync downloads data for one day, 7 days prior. Added a button to disable daily sync, which removes the cron job for daily_sync.py for ec2-user.

[2024-06-10] Added map-based AOI selection to Add/Edit City forms: users can now choose between a radius or a freeform polygon (GeoJSON) as the AOI for each city. Only one AOI type is saved per city in cities.json. Updated backend sync logic to use geo_radius or geo_json in Veraset API payloads based on AOI type. Batch syncs (/sync_all) now support both AOI types. UI uses Leaflet and Leaflet Draw for interactive map and polygon drawing.

[2024-06-10] Added automatic backup and pruning logic to save_cities in flask_app.py: before any write to cities.json, a timestamped backup (cities.json.YYYY-MM-DD_HH-MM-SS) is created, and only the 30 most recent backups are kept. This ensures that any add, edit, or delete operation on cities.json is always backed up and old backups are pruned automatically.

[2024-06-10] Moved cities.json and all backup files to the /db folder. Updated flask_app.py to use db/cities.json for all city data and backup logic. Added /db/ to .gitignore to ensure all city data and backups are excluded from version control.

2025-06-09: Created utils.py with shared load_cities and save_cities functions for db/cities.json. Updated flask_app.py, daily_sync.py, and orchestrator.py to import and use these shared functions. Removed local definitions of load_cities and save_cities from those files to avoid duplication and ensure consistent city data loading across the codebase.

2025-06-09: Updated daily_sync.py to use the full path for load_dotenv, print the VERASET_API_KEY after loading, add exception handling around the sync loop, and use flush=True for all print statements to ensure immediate output and easier debugging, especially when run via cron.

2025-06-09: Fixed environment variable loading for API key. Moved load_dotenv() to the very top of daily_sync.py and refactored sync_logic.py to always fetch VERASET_API_KEY at call time, ensuring correct authentication in all scripts regardless of import order.

2025-06-09: Updated sync_logic.py to use the full path /usr/local/bin/aws for all AWS CLI subprocess calls (assume-role and s3 sync), fixing PATH issues when running from cron or restricted environments.

2025-06-09: Added --schema-type argument to daily_sync.py (choices: FULL, TRIPS, BASIC) and updated sync_logic.py to support schema_type throughout, allowing users to select the schema type for sync jobs.

2025-06-09: Updated flask_app.py to add an API endpoint dropdown to the main, sync city, and sync all forms. Users can now select from movement/job/pings (default), movement/job/pings_by_device, movement/job/cohort, movement/job/aggregate, movement/job/devices, and movement/job/pings_by_ip. The selected endpoint is passed to the backend and used in the sync logic for all relevant sync operations.

2025-06-09: Added /v1/home/job/devices, /v1/home/job/aggregate, and /v1/home/job/cohort to the API endpoint dropdowns in flask_app.py for the main, sync city, and sync all forms.

2025-06-09: Changed API endpoint selection on the main, sync city, and sync all forms from a dropdown to checkboxes, allowing users to pick multiple endpoints. The backend now loops through the selected endpoints and makes a separate API call for each selected endpoint.

2025-06-09: Updated the labels for 'cohort', 'aggregate', and 'devices' endpoints to be prefixed with 'Work' (e.g., 'Work Cohort', 'Work Aggregate', 'Work Devices') in the API endpoint checkboxes to differentiate them from the Home endpoints.

[2024-06-09] Added /city_boundary endpoint to flask_app.py to fetch city boundaries as GeoJSON from Overpass API for use in the add/edit city map. Also imported geojson at the top of flask_app.py. This enables automatic display of city boundaries on the map after geocoding.

[2024-06-09] Added 'pip install geojson' to user_data.sh to ensure geojson is installed for Flask city boundary feature.

[2024-06-09] Improved city boundary display: after showing the boundary, the map remains centered on the city, and the map height was increased to 800px in both add and edit city forms.

[2025-06-16] Fixed API endpoint selection: sync_city_for_date now accepts a custom endpoint, and both sync_city and sync_all in flask_app.py use the correct endpoint for each selected API endpoint (including Home endpoints). Endpoint normalization is handled for both /v1/... and ... forms.

[2024-06-17] Improved logging: aws s3 sync output in app.log now only shows the first 5 and last 5 copy lines (with a summary if more than 10), and app.log is rotated to keep only the newest 10,000 lines after each sync.

[2024-06-17] Fixed sync_city in flask_app.py to make a single API call per endpoint for the full date range (start_date to end_date), not one per day. This matches Veraset API best practices and reduces API calls.

2025-06-17: Added S3 backup functionality to save_cities() in utils.py. Now, every update to cities.json is also backed up to S3 using the bucket specified by CITIES_BACKUP_BUCKET in .env. Backups are timestamped and stored in the cities-backup/ folder in the bucket.

[2024-06-10] Added is_daily_sync_enabled function to flask_app.py to fix NameError on /daily_sync_config page:
- Function checks if daily sync cron job is enabled by looking for daily_sync.py in crontab
- Works in both EC2 (using ec2-user's crontab) and local environments
- Handles errors gracefully and logs them
- Used by daily_sync_config page to show correct sync enabled/disabled state

[2024-06-10] Added update_sync_time route to flask_app.py to fix BuildError on /daily_sync_config page:
- New route handles enabling/disabling daily sync and updating sync time
- Updates both .env file and crontab when sync time is changed
- Properly handles form submission from daily sync configuration page
- Shows success/error messages using flash

[2024-06-10] Added SCHEMA_TYPES and S3_BUCKET_MAPPING constants to flask_app.py:
- SCHEMA_TYPES defines available schema types (FULL, TRIPS, BASIC)
- S3_BUCKET_MAPPING maps endpoint#schema combinations to their S3 bucket environment variables
- Used by daily_sync_config page to show and configure S3 buckets for each endpoint/schema combination
- Simplified API endpoints to focus on movement/job/pings and movement/job/trips

[2024-06-10] Fixed S3_BUCKET_MAPPING undefined error in daily_sync_config template:
- Added S3_BUCKET_MAPPING to template context in daily_sync_config route
- Now properly shows S3 bucket environment variables for each endpoint/schema combination
- Fixed template rendering error on /daily_sync_config page

[2024-06-10] Fixed sync time handling in flask_app.py:
- Split get_sync_time into get_sync_time_tuple() and get_sync_time()
- get_sync_time_tuple() returns (hour, minute) for internal use
- get_sync_time() returns formatted "HH:MM" for HTML time input
- Fixed ValueError in index route by using get_sync_time_tuple()
- Properly formats time in daily_sync_config page

[2024-06-10] Updated API endpoints and S3 bucket mapping to match OpenAPI spec and environment variables:
- Updated api_endpoints list to include all available endpoints:
  * movement/job/pings
  * movement/job/pings_by_device
  * work/job/cohort
  * work/job/cohort_by_device
- Updated S3_BUCKET_MAPPING to use correct environment variable names for each endpoint/schema combination
- Aligned GUI configuration page with actual available endpoints and bucket names

[2024-06-20] Fixed KeyError in daily_sync.py: The script was trying to access `city['name']` but the city objects from `db/cities.json` use the key `city`. Updated the print statements in `daily_sync.py` to use `city['city']` instead of `city['name']`.

[2024-06-20] Fixed daily_sync.py from stopping silently. Removed quotes from `DAILY_SYNC_ENDPOINTS` and `DAILY_SYNC_ENDPOINT_CONFIGS` in `.env` file to prevent parsing issues in cron environments.

[2024-06-20] Updated flask_app.py to prevent `python-dotenv` from adding quotes to environment variables when saving the `.env` file. All calls to `set_key` now use `quote_mode='never'` to ensure that values are written without quotes, resolving issues with cron job parsing.

[2024-06-20] Made `daily_sync.py` more robust. The script now correctly handles quoted environment variables, uses the correct S3 bucket for each data type by incorporating the `S3_BUCKET_MAPPING` from the Flask app, and includes enhanced error logging for configuration issues. This will prevent silent failures and ensure the daily sync runs reliably on the EC2 instance.

--- 